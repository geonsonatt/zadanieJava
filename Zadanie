import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

class Student {
    private String id;
    private String name;

    public Student(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Студент{id='" + id + "', имя='" + name + "'}";
    }
}

class Teacher {
    private String name;
    private String subject;

    public Teacher(String name, String subject) {
        this.name = name;
        this.subject = subject;
    }

    public String getName() {
        return name;
    }

    public String getSubject() {
        return subject;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    @Override
    public String toString() {
        return "Преподаватель{имя='" + name + "', предмет='" + subject + "'}";
    }
}

class StudyGroup {
    private Teacher teacher;
    private List<Student> students;

    public StudyGroup(Teacher teacher, List<Student> students) {
        this.teacher = teacher;
        this.students = students;
    }

    public Teacher getTeacher() {
        return teacher;
    }

    public List<Student> getStudents() {
        return students;
    }

    @Override
    public String toString() {
        return "УчебнаяГруппа{преподаватель=" + teacher + ", студенты=" + students + "}";
    }
}

class Stream implements Iterable<StudyGroup> {
    private List<StudyGroup> groups;

    public Stream() {
        this.groups = new ArrayList<>();
    }

    public void addGroup(StudyGroup group) {
        groups.add(group);
    }

    public int getGroupCount() {
        return groups.size();
    }

    @Override
    public Iterator<StudyGroup> iterator() {
        return groups.iterator();
    }
}

class StreamComparator implements Comparator<Stream> {
    @Override
    public int compare(Stream s1, Stream s2) {
        return Integer.compare(s1.getGroupCount(), s2.getGroupCount());
    }
}

class StreamService {
    public void sortStreams(List<Stream> streams) {
        Collections.sort(streams, new StreamComparator());
    }
}

class TeacherService {
    private List<Teacher> teachers;

    public TeacherService() {
        this.teachers = new ArrayList<>();
    }

    public void addTeacher(Teacher teacher) {
        teachers.add(teacher);
    }

    public List<Teacher> getAllTeachers() {
        return new ArrayList<>(teachers);
    }

    public Teacher getTeacherByName(String name) {
        for (Teacher teacher : teachers) {
            if (teacher.getName().equalsIgnoreCase(name)) {
                return teacher;
            }
        }
        return null;
    }

    public void updateTeacher(String name, String newName, String newSubject) {
        Teacher teacher = getTeacherByName(name);
        if (teacher != null) {
            teacher.setName(newName);
            teacher.setSubject(newSubject);
        }
    }
}

class TeacherView {
    public void displayTeacher(Teacher teacher) {
        System.out.println(teacher);
    }

    public void displayAllTeachers(List<Teacher> teachers) {
        for (Teacher teacher : teachers) {
            System.out.println(teacher);
        }
    }
}

class StudyGroupService {
    public StudyGroup createStudyGroup(Teacher teacher, List<Student> students) {
        return new StudyGroup(teacher, students);
    }
}

class Controller {
    private TeacherService teacherService;
    private TeacherView teacherView;
    private StreamService streamService;
    private StudyGroupService studyGroupService;

    public Controller() {
        this.teacherService = new TeacherService();
        this.teacherView = new TeacherView();
        this.streamService = new StreamService();
        this.studyGroupService = new StudyGroupService();
    }

    public void addTeacher(String name, String subject) {
        Teacher teacher = new Teacher(name, subject);
        teacherService.addTeacher(teacher);
    }

    public void updateTeacher(String name, String newName, String newSubject) {
        teacherService.updateTeacher(name, newName, newSubject);
    }

    public void displayAllTeachers() {
        List<Teacher> teachers = teacherService.getAllTeachers();
        teacherView.displayAllTeachers(teachers);
    }

    public void createStudyGroup(String teacherName, List<String> studentIds, List<Student> allStudents) {
        Teacher teacher = teacherService.getTeacherByName(teacherName);
        List<Student> students = new ArrayList<>();
        for (String id : studentIds) {
            for (Student student : allStudents) {
                if (student.getId().equals(id)) {
                    students.add(student);
                    break;
                }
            }
        }
        StudyGroup studyGroup = studyGroupService.createStudyGroup(teacher, students);
        System.out.println("Создана УчебнаяГруппа: " + studyGroup);
    }

    public void sortStreams(List<Stream> streams) {
        streamService.sortStreams(streams);
    }

    public static void main(String[] args) {
        Controller controller = new Controller();
        Scanner scanner = new Scanner(System.in);
        String command;

        List<Student> allStudents = new ArrayList<>();
        allStudents.add(new Student("1", "Студент А"));
        allStudents.add(new Student("2", "Студент Б"));
        allStudents.add(new Student("3", "Студент В"));

        do {
            System.out.println("Введите команду (добавить, обновить, список, создатьГруппу, сортироватьПотоки, выход): ");
            command = scanner.nextLine();

            switch (command) {
                case "добавить":
                    System.out.println("Введите имя преподавателя: ");
                    String name = scanner.nextLine();
                    System.out.println("Введите предмет преподавателя: ");
                    String subject = scanner.nextLine();
                    controller.addTeacher(name, subject);
                    break;
                case "обновить":
                    System.out.println("Введите текущее имя преподавателя: ");
                    String currentName = scanner.nextLine();
                    System.out.println("Введите новое имя преподавателя: ");
                    String newName = scanner.nextLine();
                    System.out.println("Введите новый предмет преподавателя: ");
                    String newSubject = scanner.nextLine();
                    controller.updateTeacher(currentName, newName, newSubject);
                    break;
                case "список":
                    controller.displayAllTeachers();
                    break;
                case "создатьГруппу":
                    System.out.println("Введите имя преподавателя: ");
                    String teacherName = scanner.nextLine();
                    System.out.println("Введите ID студентов (через запятую): ");
                    String[] ids = scanner.nextLine().split(",");
                    List<String> studentIds = new ArrayList<>();
                    for (String id : ids) {
                        studentIds.add(id.trim());
                    }
                    controller.createStudyGroup(teacherName, studentIds, allStudents);
                    break;
                case "сортироватьПотоки":
                    List<Stream> streams = new ArrayList<>();
                    Stream stream1 = new Stream();
                    stream1.addGroup(new StudyGroup(new Teacher("Преподаватель 1", "Математика"), allStudents));
                    Stream stream2 = new Stream();
                    stream2.addGroup(new StudyGroup(new Teacher("Преподаватель 2", "Физика"), allStudents));
                    streams.add(stream1);
                    streams.add(stream2);
                    controller.sortStreams(streams);
                    System.out.println("Потоки отсортированы.");
                    break;
                case "выход":
                    System.out.println("Выход...");
                    break;
                default:
                    System.out.println("Неверная команда!");
                    break;
            }
        } while (!command.equals("выход"));

        scanner.close();
    }
}
