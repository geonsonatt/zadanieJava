import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

class StudyGroup {
}

class Stream implements Iterable<StudyGroup> {
    private List<StudyGroup> groups;

    public Stream() {
        this.groups = new ArrayList<>();
    }

    public void addGroup(StudyGroup group) {
        groups.add(group);
    }

    public int getGroupCount() {
        return groups.size();
    }

    @Override
    public Iterator<StudyGroup> iterator() {
        return groups.iterator();
    }
}

class StreamComparator implements Comparator<Stream> {
    @Override
    public int compare(Stream s1, Stream s2) {
        return Integer.compare(s1.getGroupCount(), s2.getGroupCount());
    }
}

class StreamService {
    public void sortStreams(List<Stream> streams) {
        Collections.sort(streams, new StreamComparator());
    }
}

class Controller {
    private StreamService streamService;

    public Controller() {
        this.streamService = new StreamService();
    }

    public void sortStreams(List<Stream> streams) {
        streamService.sortStreams(streams);
    }

    public static void main(String[] args) {
        StudyGroup group1 = new StudyGroup();
        StudyGroup group2 = new StudyGroup();
        StudyGroup group3 = new StudyGroup();

        Stream stream1 = new Stream();
        stream1.addGroup(group1);
        stream1.addGroup(group2);

        Stream stream2 = new Stream();
        stream2.addGroup(group3);

        List<Stream> streams = new ArrayList<>();
        streams.add(stream1);
        streams.add(stream2);

        Controller controller = new Controller();
        controller.sortStreams(streams);

        for (Stream stream : streams) {
            System.out.println("Stream with " + stream.getGroupCount() + " groups");
        }
    }
}
